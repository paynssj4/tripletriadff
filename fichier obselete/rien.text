import pygame
import json
import random
import os
import time
from ai_logic import AIPlayer  # Assurez-vous que ai_logic.py existe
from card import Card
from gamelogic import GameLogic

# Initialisation de Pygame
pygame.init()
pygame.mixer.init()

# Charger la musique de fond
pygame.mixer.music.load('/home/greg/Documents/test jeux/test jeux tt/Nouveau dossier/fichier ancien/bgm.mp3')
pygame.mixer.music.play(-1)  # Lancer la musique en boucle au début

# Charger les sons
capture_sound = pygame.mixer.Sound('/home/greg/Documents/test jeux/test jeux tt/Nouveau dossier/fichier ancien/sound-turn.wav')

# Dimensions de la fenêtre
LARGEUR_FENETRE = 950
HAUTEUR_FENETRE = 554
fenetre = pygame.display.set_mode((LARGEUR_FENETRE, HAUTEUR_FENETRE))
pygame.display.set_caption("Triple Triad")

# Charger les données JSON
with open('/home/greg/Documents/test jeux/test jeux tt/Nouveau dossier/selected_cards.json', 'r') as f:
    selected_cards_data = json.load(f)
with open('/home/greg/Documents/test jeux/test jeux tt/Nouveau dossier/fichier ancien/cards.json', 'r') as f:
    all_cards_data = json.load(f)

# Chemin du dossier des images
img_folder = '/home/greg/Documents/test jeux/test jeux tt/Nouveau dossier/fichier ancien/Img'

# Charger les images de fond
fond_fenetre = pygame.image.load(os.path.join(img_folder, 'board-mat.jpg')).convert()
fond_carte_joueur = pygame.image.load(os.path.join(img_folder, 'cardbleu.png')).convert_alpha()
fond_carte_ia = pygame.image.load(os.path.join(img_folder, 'cardrouge.png')).convert_alpha()
spinner = pygame.image.load(os.path.join(img_folder, 'spinner.png')).convert_alpha()

# Redimensionner les images des cartes et du spinner
fond_carte_joueur = pygame.transform.scale(fond_carte_joueur, (100, 100))
fond_carte_ia = pygame.transform.scale(fond_carte_ia, (100, 100))
spinner = pygame.transform.scale(spinner, (50, 50))

def dessiner_plateau(fenetre):
    """Dessine le plateau de jeu."""
    plateau_x = (LARGEUR_FENETRE - 3 * 150) // 2
    plateau_y = (HAUTEUR_FENETRE - 3 * 150) // 2
    for i in range(1, 3):
        pygame.draw.line(fenetre, (0, 0, 0), (plateau_x + 150 * i, plateau_y), (plateau_x + 150 * i, plateau_y + 3 * 150), 2)
        pygame.draw.line(fenetre, (0, 0, 0), (plateau_x, plateau_y + 150 * i), (plateau_x + 3 * 150, plateau_y + 150 * i), 2)

def dessiner_cartes(fenetre, cartes_joueur, cartes_ia, start_time):
    """Dessine les cartes des joueurs."""
    elapsed_time = time.time() - start_time
    delay = 0.5
    #Affichage des cartes du joueur
    for i, carte in enumerate(cartes_joueur):
        if elapsed_time > i * delay:
            y_pos = HAUTEUR_FENETRE - 100 - i * 80 - (elapsed_time - i * delay) * 200
            y_pos = max(y_pos, 50 + i * 80)
            carte.resize_for_hand(100, 100)  # Redimensionner les cartes en main
            carte.x = 50 #ajouter cette ligne
            carte.y = y_pos #ajouter cette ligne
            fenetre.blit(carte.background, (50, y_pos))
            fenetre.blit(carte.image, (50, y_pos))
            carte.draw_numbers(fenetre, pygame.font.SysFont("Arial", 24, bold=True))  # Dessiner les chiffres sur les cartes
    #Affichage des cartes de l'ia
    for i, carte in enumerate(cartes_ia):
        if elapsed_time > i * delay:
            y_pos = HAUTEUR_FENETRE - 100 - i * 80 - (elapsed_time - i * delay) * 200
            y_pos = max(y_pos, 50 + i * 80)
            carte.resize_for_hand(100, 100)  # Redimensionner les cartes en main
            carte.x = LARGEUR_FENETRE - 150 #ajouter cette ligne
            carte.y = y_pos #ajouter cette ligne
            fenetre.blit(carte.background, (LARGEUR_FENETRE - 150, y_pos))
            fenetre.blit(carte.image, (LARGEUR_FENETRE - 150, y_pos))
            carte.draw_numbers(fenetre, pygame.font.SysFont("Arial", 24, bold=True))  # Dessiner les chiffres sur les cartes

def dessiner_jeu(fenetre, game_logic, selected_card=None, mouse_pos=None, start_time=None):
    """Dessine l'ensemble du jeu (plateau, cartes, etc.)."""
    fenetre.blit(fond_fenetre, (0, 0))
    dessiner_plateau(fenetre)
    plateau_x = (LARGEUR_FENETRE - 3 * 150) // 2
    plateau_y = (HAUTEUR_FENETRE - 3 * 150) // 2
    for i, card in enumerate(game_logic.game_board):
        if card is not None:
            x = plateau_x + (i % 3) * 150
            y = plateau_y + (i // 3) * 150
            card.resize_for_cell(150, 150)  # Redimensionner les cartes du plateau
            card.x = x #ajouter cette ligne
            card.y = y #ajouter cette ligne
            fenetre.blit(card.background, (x, y))  # Dessiner l'arrière-plan en premier
            fenetre.blit(card.image, (x, y))  # Dessiner l'image par-dessus l'arrière-plan
            card.draw_numbers(fenetre, pygame.font.SysFont("Arial", 24, bold=True))  # Dessiner les chiffres par-dessus l'image
            
    dessiner_cartes(fenetre, game_logic.player_cards, game_logic.ai_player.hand, start_time)
    # Dessiner le spinner pour indiquer le tour
    if game_logic.current_turn == "player":
        spinner_x = 50
    else:
        spinner_x = LARGEUR_FENETRE - 150
    spinner_y = plateau_y - spinner.get_height() - 10
    fenetre.blit(spinner, (spinner_x, spinner_y))
    #affichage de la carte selectionner
    if selected_card and mouse_pos:
        offset_x, offset_y = 5, 5
        fenetre.blit(selected_card.background, (mouse_pos[0] - offset_x, mouse_pos[1] - offset_y))
        fenetre.blit(selected_card.image, (mouse_pos[0] - offset_x, mouse_pos[1] - offset_y))
        selected_card.draw_numbers(fenetre, pygame.font.SysFont("Arial", 24, bold=True))  # Dessiner les chiffres sur la carte sélectionnée
    pygame.display.flip()

def afficher_message_fin(fenetre, message):
    """Affiche le message de fin de partie et les boutons."""
    font = pygame.font.SysFont(None, 48)
    text = font.render(message, True, (255, 255, 255))
    text_rect = text.get_rect(center=(LARGEUR_FENETRE // 2, HAUTEUR_FENETRE // 2 - 50))

    # Créer les boutons
    rejouer_rect = pygame.Rect(LARGEUR_FENETRE // 2 - 150, HAUTEUR_FENETRE // 2 + 50, 140, 50)
    quitter_rect = pygame.Rect(LARGEUR_FENETRE // 2 + 10, HAUTEUR_FENETRE // 2 + 50, 140, 50)
    rejouer_text = font.render("Rejouer", True, (255, 255, 255))
    quitter_text = font.render("Quitter", True, (255, 255, 255))

    # Afficher le texte et les boutons
    fenetre.blit(text, text_rect)
    pygame.draw.rect(fenetre, (50, 50, 50), rejouer_rect)
    pygame.draw.rect(fenetre, (50, 50, 50), quitter_rect)
    fenetre.blit(rejouer_text, (rejouer_rect.x + 10, rejouer_rect.y + 10))
    fenetre.blit(quitter_text, (quitter_rect.x + 10, quitter_rect.y + 10))

    pygame.display.flip()

    # Boucle pour attendre un clic sur un bouton
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return False  # Quitter le jeu
            elif event.type == pygame.MOUSEBUTTONDOWN:
                x, y = event.pos
                if rejouer_rect.collidepoint(x, y):
                    return True  # Rejouer
                elif quitter_rect.collidepoint(x, y):
                    pygame.quit()
                    return False  # Quitter le jeu

def main():
    """Fonction principale du jeu."""
    # Créer les cartes du joueur et de l'IA
    player_cards = [Card(**card_data) for card_data in selected_cards_data]
    ai_deck = [Card(**card_data, background='cardrouge.png') for card_data in all_cards_data]
    ai_player = AIPlayer(ai_deck)

    # Initialiser la logique du jeu
    game_logic = GameLogic(player_cards, ai_player)
    game_logic.start_game()  # Démarrer le jeu

    selected_card_index = None  # Variable pour savoir quelle carte le joueur a sélectionnée.
    start_time = time.time()
    running = True

    # Coordonnées des cellules adaptées à la nouvelle taille de la fenêtre
    original_width = 1258
    original_height = 734
    new_width = LARGEUR_FENETRE
    new_height = HAUTEUR_FENETRE
    scale_x = new_width / original_width
    scale_y = new_height / original_height

    cell_coords = {
        "cell_1": {"x": 319, "y": 50, "width": 150, "height": 150},
        "cell_2": {"x": 525, "y": 50, "width": 150, "height": 150},
        "cell_3": {"x": 731, "y": 50, "width": 150, "height": 150},
        "cell_4": {"x": 319, "y": 260, "width": 150, "height": 150},
        "cell_5": {"x": 525, "y": 260, "width": 150, "height": 150},
        "cell_6": {"x": 731, "y": 260, "width": 150, "height": 150},
        "cell_7": {"x": 319, "y": 470, "width": 150, "height": 150},
        "cell_8": {"x": 525, "y": 470, "width": 150, "height": 150},
        "cell_9": {"x": 731, "y": 470, "width": 150, "height": 150},
    }
    # Boucle du jeux
    while running and not game_logic.check_game_over(): #modification de cette condition
        mouse_pos = pygame.mouse.get_pos()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return False  # Quitter le jeu
            elif event.type == pygame.MOUSEBUTTONDOWN and game_logic.current_turn == "player":
                x, y = event.pos
                selected = False
                # Vérifier si le clic est sur une carte du joueur
                for i, card in enumerate(player_cards):
                    card_rect = pygame.Rect(50, 50 + i * 80, 100, 100)
                    if card_rect.collidepoint(x, y):
                        selected_card_index = i
                        selected = True
                        break
                if selected:
                    continue
                # Vérifier si le clic est sur une cellule du plateau
                for cell_name, coords in cell_coords.items():
                    cell_rect = pygame.Rect(
                        int(coords["x"] * scale_x),
                        int(coords["y"] * scale_y),
                        int(coords["width"] * scale_x),
                        int(coords["height"] * scale_y)
                    )
                    if cell_rect.collidepoint(x, y) and selected_card_index is not None:
                        #ajout de la verification si player_cards n'est pas vide.
                        if len(player_cards) > selected_card_index:
                            game_logic.player_move(list(cell_coords.keys()).index(cell_name), player_cards[selected_card_index], fenetre, dessiner_plateau, capture_sound)
                            player_cards.pop(selected_card_index)  # Retirer la carte de la main du joueur
                        selected_card_index = None
                        break

        if game_logic.current_turn == "ai":  # Vérifier si c'est le tour de l'IA
            position, card = game_logic.ai_move(fenetre, dessiner_plateau, capture_sound)
            if position is not None and card is not None:
                print(f"AI placed {card.name} at position {position}")

        if game_logic.check_game_over():
            message = game_logic.get_winner()
            if not afficher_message_fin(fenetre, message):
                return False  # Quitter le jeu
            else:
                return True  # Rejouer

        # Redimensionner la carte sélectionnée
        if selected_card_index is not None:
            selected_card = player_cards[selected_card_index]
            selected_card.resize_for_cell(100, 100)
        else:
            selected_card = None
        dessiner_jeu(fenetre, game_logic, selected_card, mouse_pos, start_time)


# Appel de la fonction main pour lancer le jeu
if __name__ == "__main__":
    while True:
        if not main():
            break
    pygame.quit()
